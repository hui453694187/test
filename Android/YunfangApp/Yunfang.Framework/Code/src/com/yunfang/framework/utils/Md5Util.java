package com.yunfang.framework.utils;import java.io.File;import java.io.FileInputStream;import java.math.BigInteger;import java.security.MessageDigest;/** *  * @author gorson mdk加密工具 */public class Md5Util {	private final static String[] hexDigits = { "0", "1", "2", "3", "4", "5",			"6", "7", "8", "9", "a", "b", "c", "d", "e", "f" };	/**	 * 字节数组转为十六进制	 * 	 * @param b	 *            :字节数组	 * @return	 */	public static String byteArrayToHexString(byte[] b) {		StringBuffer resultSb = new StringBuffer();		for (int i = 0; i < b.length; i++) {			resultSb.append(byteToHexString(b[i]));		}		return resultSb.toString();	}	/**	 * 字节转为十六进制	 * 	 * @param b	 *            ：字节	 * @return	 */	private static String byteToHexString(byte b) {		int n = b;		if (n < 0)			n = 256 + n;		int d1 = n / 16;		int d2 = n % 16;		return hexDigits[d1] + hexDigits[d2];	}	/**	 * MD5加密	 * 	 * @param origin	 * @return	 */	public static String MD5Encode(String origin) {		String resultString = null;		try {			resultString = new String(origin);			MessageDigest md = MessageDigest.getInstance("MD5");// SHA1			resultString = byteArrayToHexString(md.digest(resultString					.getBytes()));		} catch (Exception ex) {			ex.printStackTrace();		}		return resultString;	}	/**	 * 获取单个文件的MD5值！	 * 	 * @param file	 * @return	 */	public static String getFileMD5(File file) {		if (!file.isFile()) {			return null;		}		MessageDigest digest = null;		FileInputStream in = null;		byte buffer[] = new byte[1024];		int len;		try {			digest = MessageDigest.getInstance("MD5");			in = new FileInputStream(file);			while ((len = in.read(buffer, 0, 1024)) != -1) {				digest.update(buffer, 0, len);			}			in.close();		} catch (Exception e) {			e.printStackTrace();			return null;		}		BigInteger bigInt = new BigInteger(1, digest.digest());		return bigInt.toString(16);	}}